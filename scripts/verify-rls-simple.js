const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://ctrncyswjdvckozsosnv.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN0cm5jeXN3amR2Y2tvenNvc252Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NDQxMjA4NywiZXhwIjoyMDU5OTg4MDg3fQ.NkS4I4IOE_8V4PHmpuBAEydJ6zMntw0ceALdDvXPkHM';

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    persistSession: false
  }
});

async function verifyRLSConfiguration() {
  try {
    console.log('\n===== Verificando configuraci√≥n RLS =====');
    
    // Ejecutar SQL directamente para verificar pol√≠ticas
    const { data: policies, error: policiesError } = await supabase
      .from('users')
      .select('*')
      .limit(1);

    if (policiesError) {
      console.error('Error accediendo a la tabla users:', policiesError.message);
    } else {
      console.log('‚úÖ Conexi√≥n exitosa a la tabla users');
    }
    
    // Pruebas de inserci√≥n desde cliente an√≥nimo
    console.log('\n===== Pruebas de inserci√≥n an√≥nima =====');
    
    // Cliente an√≥nimo (con clave an√≥nima)
    const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || supabaseUrl.split('.')[0].split('://')[1];
    const anonClient = createClient(supabaseUrl, anonKey);
    
    const testTime = Date.now();
    
    // Probar inserci√≥n de paciente an√≥nimo
    console.log('\nüìù Prueba: inserci√≥n de PACIENTE con cliente an√≥nimo');
    const { data: pacienteInsert, error: pacienteError } = await anonClient
      .from('users')
      .insert({
        email: `test.paciente.${testTime}@example.com`,
        password_hash: '$2a$10$xZtcf6LWLD6xRoIgTXpqUO0FdqPHyI.KSNT.YrJUn5NAWMnr2.SK6',
        role: 'paciente',
        first_name: 'Test',
        last_name: 'Paciente',
        is_active: true
      })
      .select();
    
    if (pacienteError) {
      console.log(`‚ùå Error: ${pacienteError.message}`);
    } else {
      console.log('‚úÖ √âxito - Paciente insertado correctamente');
    }
    
    // Probar inserci√≥n de psic√≥logo an√≥nimo (debe fallar)
    console.log('\nüìù Prueba: inserci√≥n de PSICOLOGO con cliente an√≥nimo');
    const { data: psicologoInsert, error: psicologoError } = await anonClient
      .from('users')
      .insert({
        email: `test.psicologo.${testTime}@example.com`,
        password_hash: '$2a$10$xZtcf6LWLD6xRoIgTXpqUO0FdqPHyI.KSNT.YrJUn5NAWMnr2.SK6',
        role: 'psicologo',
        first_name: 'Test',
        last_name: 'Psicologo',
        is_active: true
      })
      .select();
    
    if (psicologoError) {
      console.log(`‚úÖ Error esperado: ${psicologoError.message}`);
    } else {
      console.log('‚ùå Problema: Se permiti√≥ insertar psic√≥logo con cliente an√≥nimo');
    }
    
    console.log('\n===== Resumen =====');
    console.log('‚Ä¢ Para pruebas completas desde el frontend:');
    console.log('  1. Verifica inserci√≥n an√≥nima: paciente OK, psic√≥logo Error');
    console.log('  2. Inicia sesi√≥n como admin: debe poder crear paciente y psic√≥logo');
    console.log('  3. Inicia sesi√≥n como psic√≥logo: debe poder ver solo su perfil, no otros');
    
  } catch (error) {
    console.error('Error:', error);
  }
}

verifyRLSConfiguration();
